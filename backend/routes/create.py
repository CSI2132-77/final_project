import logging
from typing import Any
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from models import (
    HotelChain,
    ChainContact,
    Hotel,
    HotelContact,
    Room,
    RoomAmenity,
    RoomProblem,
    Booking,
    Renting,
    Employee,
    Customer
)
import database
from schema import (
    RoomCreate,
    RoomResponse
)


# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s - %(message)s"
)

# Initialize the FastAPI router
router = APIRouter()

#* POST request to add a room to a hotel
#* TEST CURL: curl -X POST "http://localhost:8000/room/add" -H "Content-Type: application/json" -d '{"hotel_id": 1, "price": 100.0, "capacity": "double", "view_type": "sea", "is_extendable": true}'
@router.post("/room/add", tags=["add_room"], response_model=RoomResponse)
async def add_room( room: RoomCreate, db: Session = Depends(database.get_db)):
    try:
        # Create a new Room object using the Room model
        new_room = Room(**room.model_dump())  # room_id will be auto-generated by SQLAlchemy
        # Add the new room to the database
        db.add(new_room)
        db.commit()
        db.refresh(new_room)
        logging.info(f"Added new room with ID {new_room.room_id} to hotel ID {new_room.hotel_id}")
        return new_room
    except Exception as e:
        logging.error(f"Error adding room: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")