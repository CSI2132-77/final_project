import logging
from typing import Any
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
import database
from models import (HotelChain, ChainContact, Hotel, HotelContact,
                    Room, RoomAmenity, RoomProblem, Booking, Renting, Employee, Customer)
from schema import (CustomerCreate, CustomerResponse, EmployeeCreate, EmployeeResponse,
                    HotelCreate, HotelResponse, RoomCreate, RoomResponse)

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s - %(message)s"
)

# Initialize the FastAPI router
router = APIRouter()

#* POST request to add a customer
#* curl -X POST "http://localhost:8000/customer/add" -H "Content-Type: application/json" -d '{"full_name": "John Doe", "address": "123 Main St", "id_type": "SSN", "id_number": "132-31-5733"}'
@router.post("/customer/add", tags=["add_customer"], response_model=CustomerResponse)
async def add_customer(
    customer: CustomerCreate,
    db: Session = Depends(database.get_db)
    ) -> CustomerResponse:
    try:
        existing_customer = db.query(Customer).filter(Customer.id_number == customer.id_number).first()
        if existing_customer:
            logging.error(f"Customer with ID number {customer.id_number} already exists")
            raise HTTPException(status_code=400, detail="Customer with this ID number already exists")
        # Create a new Customer object using the Customer model
        new_customer = Customer(**customer.model_dump())  # customer_id will be auto-generated by SQLAlchemy
        # Add the new customer to the database
        db.add(new_customer)
        db.commit()
        db.refresh(new_customer)
        logging.info(f"Added new customer with ID {new_customer.customer_id}")
        return new_customer
    except Exception as e:
        logging.error(f"Error adding customer: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

#* POST request to add a employee
#* curl -X POST "http://localhost:8000/employee/add" -H "Content-Type: application/json" -d '{"hotel_id": 1, "full_name": "Jane Doe", "address": "456 Elm St", "ssn_sin": "123-45-6789", "role": "manager"}'
@router.post("/employee/add", tags=["add_employee"], response_model=EmployeeResponse)
async def add_employee(
    employee: EmployeeCreate,
    db: Session = Depends(database.get_db)
    ) -> EmployeeResponse:
    try:
        existing_employee = db.query(Employee).filter(Employee.ssn_sin == employee.ssn_sin).first()
        if existing_employee:
            logging.error(f"Employee with SSN/SIN {employee.ssn_sin} already exists")
            raise HTTPException(status_code=400, detail="Employee with this SSN/SIN already exists")
        # Create a new Employee object using the Employee model
        new_employee = Employee(**employee.model_dump())  # employee_id will be auto-generated by SQLAlchemy
        # Add the new employee to the database
        db.add(new_employee)
        db.commit()
        db.refresh(new_employee)
        logging.info(f"Added new employee with ID {new_employee.employee_id}")
        return new_employee
    except Exception as e:
        logging.error(f"Error adding employee: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

#* POST request to add a hotel
#* curl -X POST "http://localhost:8000/hotel/add" -H "Content-Type: application/json" -d '{"chain_id": 1, "address": "789 Oak St", "category": 5}'
@router.post("/hotel/add", tags=["add_hotel"], response_model=HotelResponse)
async def add_hotel(
    hotel: HotelCreate,
    db: Session = Depends(database.get_db)
    ) -> HotelResponse:
    try:
        existing_hotel = db.query(Hotel).filter(Hotel.address == hotel.address).first()
        if existing_hotel:
            logging.error(f"Hotel with address {hotel.address} already exists")
            raise HTTPException(status_code=400, detail="Hotel with this address already exists")
        # Create a new Hotel object using the Hotel model
        new_hotel = Hotel(**hotel.model_dump())  # hotel_id will be auto-generated by SQLAlchemy
        # Add the new hotel to the database
        db.add(new_hotel)
        db.commit()
        db.refresh(new_hotel)
        logging.info(f"Added new hotel with ID {new_hotel.hotel_id}")
        return new_hotel
    except Exception as e:
        logging.error(f"Error adding hotel: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

#* POST request to add a room
#* curl -X POST "http://localhost:8000/room/add" -H "Content-Type: application/json" -d '{"hotel_id": 1, "price": 100.0, "capacity": "double", "view_type": "sea", "is_extendable": true}'
@router.post("/room/add", tags=["add_room"], response_model=RoomResponse)
async def add_room(
    room: RoomCreate,
    db: Session = Depends(database.get_db)
    ) -> RoomResponse:
    try:
        #* No need to check for existing room since room_id (PrimaryKey) is auto-generated
        # Create a new Room object using the Room model
        new_room = Room(**room.model_dump())  # room_id will be auto-generated by SQLAlchemy
        # Add the new room to the database
        db.add(new_room)
        db.commit()
        db.refresh(new_room)
        logging.info(f"Added new room with ID {new_room.room_id} to hotel ID {new_room.hotel_id}")
        return new_room
    except Exception as e:
        logging.error(f"Error adding room: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")
